int minasAdyacentes(tablero& t, pos p) {
    int suma=0;
    for(int i=-1;i<=1;i++){
        int subsuma = 0;
        for(int j=-1;j<=1;j++){
            if(esAdyacenteValida(p,i,j,t) && t[get<0>(p) + i][get<1>(p) + j] == true){
                subsuma = subsuma + 1;
            }
        }
        suma = suma + subsuma;
    }
    return suma;
}



############################################## AUXILIARES ##############################################

bool coordenadaValida(int c, int n){
    return ((0<=c) && (c<n));
}

bool esAdyacenteValida(pos p, int i, int j, tablero t){
    bool res = false;
    if (coordenadaValida(get<0>(p) + i, t.size()) && coordenadaValida(get<1>(p) + j, t[0].size()) && (i!=0 || j!=0)){
        res = true;
    }
    return res;
}


############################################# TESTS #####################################################

// Tests para la función minasAdyacentes.
// Ver el archivo README.md para ayuda

#include "../ejercicios.h"
#include "../auxiliares.h"
#include "../definiciones.h"
#include "gtest/gtest.h"

using namespace std;

tablero t = {
        { cMINA,  cMINA,  cVACIA, cVACIA, cVACIA },
        { cVACIA, cVACIA, cVACIA, cMINA,  cVACIA },
        { cVACIA, cMINA,  cVACIA, cVACIA, cVACIA },
        { cVACIA, cVACIA, cVACIA, cVACIA, cVACIA },
        { cMINA,  cVACIA, cMINA,  cVACIA, cVACIA },
};

// ┌───┬───┬───┬───┬───┐
// │ * │ * │ 2 │ 1 │ 1 │
// ├───┼───┼───┼───┼───┤
// │ 3 │ 3 │ 3 │ * │ 1 │
// ├───┼───┼───┼───┼───┤
// │ 1 │ * │ 2 │ 1 │ 1 │
// ├───┼───┼───┼───┼───┤
// │ 2 │ 3 │ 2 │ 1 │ 0 │
// ├───┼───┼───┼───┼───┤
// │ * │ 2 │ * │ 1 │ 0 │
// └───┴───┴───┴───┴───┘

pos p = make_pair(1,0);
TEST(minasAdyacentesTEST, posicionUnoCero) {
    ASSERT_EQ(minasAdyacentes(t,p),3);
}

pos p1 = make_pair(5,5);
TEST(minasAdyacentesTEST, noHayMinas) {
    ASSERT_EQ(minasAdyacentes(t,p1),0);
}

pos p2 = make_pair(0,1);
TEST(minasAdyacentesTEST, posicionCeroUnoConMina) {
    ASSERT_EQ(minasAdyacentes(t,p2),1);
}

pos p3 = make_pair(2,4);
TEST(minasAdyacentesTEST, posicionLimiteHorizontal) {
    ASSERT_EQ(minasAdyacentes(t,p3),1);
}

pos p4 = make_pair(0,2);
TEST(minasAdyacentesTEST, posicionLimiteVertical) {
    ASSERT_EQ(minasAdyacentes(t,p4),2);
}